/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.82
 * Generated at: 2023-11-11 02:33:52 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class updatedata2_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPではGET、POST、またはHEADのみが許可されます。 JasperはOPTIONSも許可しています。");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!-- データ変更画面（銀行バージョン）　-->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <link rel=\"stylesheet\" type=\"text/css\" href=\"menu.css\">\r\n");
      out.write("    <title>変更画面（銀行）</title>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("    <ul class=\"topnav\">\r\n");
      out.write("        <li><a href=\"/kakeiboapp/cashorbank.jsp\">現金or銀行</a></li>\r\n");
      out.write("        <li><a href=\"/kakeiboapp/home2.jsp\">HOME（銀行）</a></li>\r\n");
      out.write("    </ul>\r\n");
      out.write("\r\n");
      out.write("    <!-- 登録済みの引き出し、預け入れを取り消した現金残、預金残の変数を作成 -->\r\n");
      out.write("    ");
 int cash_after = (int)request.getAttribute("cash") - (int)request.getAttribute("get_money") + (int)request.getAttribute("out_money"); 
      out.write("\r\n");
      out.write("    ");
 int bank_after = (int)request.getAttribute("bank") + (int)request.getAttribute("get_money") - (int)request.getAttribute("out_money"); 
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <!-- 登録済みのデータを受け取って各欄に表示する -->\r\n");
      out.write("    <h1>変更画面</h1>\r\n");
      out.write("\r\n");
      out.write("    <form action=\"/kakeiboapp/UpdateServlet2\" method=\"POST\">   <!-- 変更ボタンからUpdateServlet2.javaへ　-->\r\n");
      out.write("        <label>id</label><input type=\"number\" name=\"id\" value=");
      out.print( request.getAttribute("id") );
      out.write("><br>\r\n");
      out.write("        <label>日付</label><input type=\"date\" name=\"date\" value=");
      out.print( request.getAttribute("acc_date") );
      out.write("><br>\r\n");
      out.write("        <label>内訳</label> <!-- もともと入っていた内訳の値をセレクトボックスの初期値に入れる　-->\r\n");
      out.write("        ");
 int item_code  = (int)request.getAttribute("item_code"); 
      out.write("\r\n");
      out.write("        ");
 if (item_code == 1) { 
      out.write("\r\n");
      out.write("            <select name=\"item\">\r\n");
      out.write("                <option value=\"1\" selected>食費</option>\r\n");
      out.write("                <option value=\"2\">光熱費</option>\r\n");
      out.write("                <option value=\"3\">住宅費</option>\r\n");
      out.write("            </select><br>\r\n");
      out.write("        ");
 } else if (item_code == 2) { 
      out.write("\r\n");
      out.write("            <select name=\"item\">\r\n");
      out.write("                <option value=\"1\">食費</option>\r\n");
      out.write("                <option value=\"2\" selected>光熱費</option>\r\n");
      out.write("                <option value=\"3\">住宅費</option>\r\n");
      out.write("            </select><br>\r\n");
      out.write("        ");
 } else { 
      out.write("\r\n");
      out.write("            <select name=\"item\">\r\n");
      out.write("                <option value=\"1\">食費</option>\r\n");
      out.write("                <option value=\"2\">光熱費</option>\r\n");
      out.write("                <option value=\"3\" selected>住宅費</option>\r\n");
      out.write("            </select><br>\r\n");
      out.write("        ");
 } 
      out.write("\r\n");
      out.write("        <label>引き出し</label><input type=\"number\" name=\"getm\" value=");
      out.print( request.getAttribute("get_money") );
      out.write("><br>\r\n");
      out.write("        <label>預け入れ</label><input type=\"number\" name=\"outm\" value=");
      out.print( request.getAttribute("out_money") );
      out.write("><br>\r\n");
      out.write("        <label>メモ</label><input type=\"text\" name=\"memo\" value=");
      out.print( request.getAttribute("memo") );
      out.write("><br>\r\n");
      out.write("        <p></p>\r\n");
      out.write("        <label>現金残</label><input type=\"number\" name=\"cash_before\" value=");
      out.print( request.getAttribute("cash") );
      out.write(" readonly><br>\r\n");
      out.write("        <label>預金残</label><input type=\"number\" name=\"bank_before\" value=");
      out.print( request.getAttribute("bank") );
      out.write(" readonly><br>\r\n");
      out.write("        <input type=\"hidden\" name=\"cash_after\" value=");
      out.print( cash_after );
      out.write(">\r\n");
      out.write("        <input type=\"hidden\" name=\"bank_after\" value=");
      out.print( bank_after );
      out.write("><br>\r\n");
      out.write("        <input type=\"submit\" value=\"変更\">\r\n");
      out.write("    </form>\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
